generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OfferTracking {
  id          String     @id @default(cuid())
  actionType  String
  createdAt   DateTime   @default(now())
  path        String?
  promoCodeId String?
  whopId      String?
  promoCode   PromoCode? @relation(fields: [promoCodeId], references: [id])
  whop        Whop?      @relation(fields: [whopId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  author    String
  content   String
  rating    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  verified  Boolean  @default(false)
  whopId    String
  whop      Whop     @relation(fields: [whopId], references: [id])
}

model Settings {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  faviconUrl String?
}

model LegalPage {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactSubmission {
  id        String        @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    ContactStatus @default(UNREAD)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model PromoCode {
  id             String          @id @default(cuid())
  title          String
  description    String
  code           String?
  type           PromoType
  value          String
  whopId         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  offerTrackings OfferTracking[]
  whop           Whop            @relation(fields: [whopId], references: [id])
}

model Whop {
  id                  String          @id @default(cuid())
  name                String
  slug                String          @unique
  logo                String?
  description         String?
  rating              Float           @default(0)
  displayOrder        Int             @default(0)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  publishedAt         DateTime?
  affiliateLink       String
  screenshots         String[]        @default([])
  website             String?
  price               String?
  category            String?
  aboutContent        String?
  howToRedeemContent  String?
  promoDetailsContent String?
  featuresContent     String?
  termsContent        String?
  faqContent          String?
  whopCategory        WhopCategory    @default(OTHER)
  offerTrackings      OfferTracking[]
  promoCodes          PromoCode[]
  reviews             Review[]
}

model BulkImport {
  id          String       @id @default(cuid())
  filename    String
  totalRows   Int
  successRows Int
  failedRows  Int
  status      ImportStatus @default(PROCESSING)
  errors      String[]     @default([])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum WhopCategory {
  PERSONAL_DEVELOPMENT
  SOCIAL_MEDIA
  LANGUAGES
  CAREERS
  GAMING
  AI
  TRADING
  RECREATION
  FITNESS
  REAL_ESTATE
  TRAVEL
  SPORTS_BETTING
  ECOMMERCE
  BUSINESS
  RESELLING
  DATING
  COMPUTER_SCIENCE
  PERSONAL_FINANCE
  OTHER
}

enum Role {
  USER
  ADMIN
}

enum ContactStatus {
  UNREAD
  READ
  REPLIED
}

enum PromoType {
  DISCOUNT
  FREE_TRIAL
  EXCLUSIVE_ACCESS
  BUNDLE_DEAL
  LIMITED_TIME
}

enum ImportStatus {
  PROCESSING
  COMPLETED
  FAILED
}
